!function(){"use strict";!function(){class e{constructor(e=0,t=0,a=0){this.h=e,this.s=t,this.v=a}toString(){return`hsv(${this.h},${this.s},${this.v})`}}class t{constructor(e=0,t=0,a=0){this.h=e,this.s=t,this.l=a}toString(){return`hsl(${this.h},${this.s},${this.l})`}}class a{constructor(e=0,t=0,a=0,r=0){this.h=e,this.s=t,this.l=a,this.a=r}toString(){return`hsla(${this.h},${this.s},${this.l},${this.a})`}}class r{constructor(e=0,t=0,a=0){this.r=e,this.g=t,this.b=a}toString(){return`rgb(${this.r},${this.g},${this.b})`}}class s{constructor(e=0,t=0,a=0,r=0){this.r=e,this.g=t,this.b=a,this.a=r}toString(){return`rgba(${this.r},${this.g},${this.b},${this.a})`}}class i{constructor(e=0,t=0,a=0,r=0){this.c=e,this.m=t,this.y=a,this.k=r}toString(){return`cmyk(${this.c},${this.m},${this.y},${this.k})`}}const n={HEX:"hex",RGB:"rgb",RGBA:"rgba",HSV:"hsv",HSL:"hsl",HSLA:"hsla",CMYK:"cmyk",UNKNOWN:"unknown"},h={angle:30,algorithm:1,step:.1,distance:5,tint1:.8,tint2:.4,shade1:.6,shade2:.3,alpha:1},o=function(e){if(m(e)&&"string"!=typeof e)return e;if("string"!=typeof e)throw new Error("Value is not a string!");if("#"===e[0]&&4===e.length){const t=/^#?([a-f\d])([a-f\d])([a-f\d])$/i;return"#"+e.replace(t,((e,t,a,r)=>t+t+a+a+r+r))}return"#"===e[0]?e:"#"+e},l=e=>{if(!m(e))return;const t=F(e);return(299*t.r+587*t.g+114*t.b)/1e3<128},u=e=>!l(e),f=t=>t instanceof e,c=e=>e instanceof t,d=e=>e instanceof a,b=e=>e instanceof r,v=e=>e instanceof s,g=e=>e instanceof i,p=e=>/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(e),m=e=>!!e&&(p(e)||b(e)||v(e)||f(e)||c(e)||d(e)||g(e)),k=e=>p(e)?n.HEX:b(e)?n.RGB:v(e)?n.RGBA:f(e)?n.HSV:c(e)?n.HSL:d(e)?n.HSLA:g(e)?n.CMYK:n.UNKNOWN,_=(e,t)=>!(!m(e)||!m(t))&&W(e)===W(t),w=e=>e.toString(),y=e=>{const t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(o(e)),a=[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)];return t?new r(...a):null},S=e=>"#"+((1<<24)+(e.r<<16)+(e.g<<8)+e.b).toString(16).slice(1),M=t=>{const a=new e;let r,s,i;const n=t.r/255,h=t.g/255,o=t.b/255,l=Math.max(n,h,o),u=Math.min(n,h,o),f=l-u;return i=l,s=0===l?0:1-u/l,r=l===u?0:l===n&&h>=o?(h-o)/f*60:l===n&&h<o?(h-o)/f*60+360:l===h?(o-n)/f*60+120:l===o?(n-h)/f*60+240:0,a.h=r,a.s=s,a.v=i,a},C=e=>{let t,a,s;const i=e.h,n=100*e.s,h=100*e.v,o=(100-n)*h/100,l=i%60/60*(h-o),u=o+l,f=h-l;switch(Math.floor(i/60)){case 0:t=h,a=u,s=o;break;case 1:t=f,a=h,s=o;break;case 2:t=o,a=h,s=u;break;case 3:t=o,a=f,s=h;break;case 4:t=u,a=o,s=h;break;case 5:t=h,a=o,s=f}return new r(Math.round(255*t/100),Math.round(255*a/100),Math.round(255*s/100))},B=e=>{const t=new i,a=e.r/255,r=e.g/255,s=e.b/255;return t.k=Math.min(1-a,1-r,1-s),t.c=1-t.k==0?0:(1-a-t.k)/(1-t.k),t.m=1-t.k==0?0:(1-r-t.k)/(1-t.k),t.y=1-t.k==0?0:(1-s-t.k)/(1-t.k),t.c=Math.round(100*t.c),t.m=Math.round(100*t.m),t.y=Math.round(100*t.y),t.k=Math.round(100*t.k),t},G=e=>{const t=Math.floor(255*(1-e.c/100)*(1-e.k/100)),a=Math.ceil(255*(1-e.m/100)*(1-e.k/100)),s=Math.ceil(255*(1-e.y/100)*(1-e.k/100));return new r(t,a,s)},$=e=>{let a,r,s,i;return a=e.h,s=(2-e.s)*e.v,r=e.s*e.v,0===s?r=0:(i=s<=1?s:2-s,0===i?r=0:r/=i),s/=2,new t(a,r,s)},R=t=>{let a,r,s,i;return a=t.h,i=2*t.l,r=t.s*(i<=1?i:2-i),s=(i+r)/2,r=i+r===0?0:2*r/(i+r),new e(a,r,s)},H=e=>new r(51*Math.round(e.r/51),51*Math.round(e.g/51),51*Math.round(e.b/51)),L=e=>{const t=H(e);return new s(t.r,t.g,t.b,e.a)},x=e=>S(H(y(e))),A=e=>M(H(F(e))),O=e=>$(M(H(F(e)))),T=e=>B(H(G(e))),V=e=>p(e)?x(e):b(e)?H(e):v(e)?L(e):f(e)?A(e):c(e)?O(e):g(e)?T(e):e,q=(e,t="rgb",a=1)=>{let r;switch(t.toLowerCase()){case"hex":r=W(e);break;case"rgb":r=F(e);break;case"rgba":r=K(e,a);break;case"hsl":r=D(e);break;case"hsla":r=E(e,a);break;case"hsv":r=N(e);break;case"cmyk":r=P(e);break;default:r=e}return r},W=e=>"string"==typeof e?o(e):S(F(e)),F=e=>{if(b(e))return e;if(v(e))return new r(e.r,e.g,e.b);if(f(e))return C(e);if(c(e))return C(R(e));if(d(e))return C(R(e));if(p(e))return y(e);if(g(e))return G(e);throw new Error("Unknown color format!")},K=(e,t)=>{if(v(e))return t&&(e.a=t),e;const a=F(e);return new s(a.r,a.g,a.b,t)},N=e=>M(F(e)),D=e=>$(M(F(e))),E=(e,t=1)=>{if(d(e))return t&&(e.a=t),e;let r=$(M(F(e)));return r.a=t,new a(r.h,r.s,r.l,r.a)},P=e=>B(F(e)),Y=e=>{const t=F(e),a=k(e).toLowerCase(),s=Math.round(.2125*t.r+.7154*t.g+.0721*t.b),i=new r(s,s,s);return q(i,a)},j=(e,t=10)=>I(e,-1*Math.abs(t)),I=(e,t=10)=>{let a,r,s=t>0;const i=function(e,t){let a,r,s;const i=e.slice(1),n=parseInt(i,16);return a=(n>>16)+t,a>255?a=255:a<0&&(a=0),s=(n>>8&255)+t,s>255?s=255:s<0&&(s=0),r=(255&n)+t,r>255?r=255:r<0&&(r=0),"#"+(r|s<<8|a<<16).toString(16)};a=k(e).toLowerCase(),a===n.RGBA&&e.a;do{r=i(W(e),t),s?t--:t++}while(r.length<7);return q(r,a)},U=(e,t,a=1)=>{const r=N(e),s=k(e).toLowerCase();let i=r.h;for(i+=t;i>=360;)i-=360;for(;i<0;)i+=360;return r.h=i,q(r,s,a)},X=(t,a,r,s)=>{const i=Object.assign({},h,s);let n;const o=[];let l,u,c,d,b;if(l=N(t),c=l.h,d=l.s,b=l.v,!1===f(l))return console.warn("The value is a not supported color format!"),!1;function v(e,t,a){return Math.max(t,Math.min(e,a))}function g(e,t,a){return e<t?t:e>a?a:e}function p(e,t){for(e+=t;e>=360;)e-=360;for(;e<0;)e+=360;return e}switch(a){case"monochromatic":case"mono":if(1===i.algorithm)u=C(l),u.r=g(Math.round(u.r+(255-u.r)*i.tint1),0,255),u.g=g(Math.round(u.g+(255-u.g)*i.tint1),0,255),u.b=g(Math.round(u.b+(255-u.b)*i.tint1),0,255),o.push(M(u)),u=C(l),u.r=g(Math.round(u.r+(255-u.r)*i.tint2),0,255),u.g=g(Math.round(u.g+(255-u.g)*i.tint2),0,255),u.b=g(Math.round(u.b+(255-u.b)*i.tint2),0,255),o.push(M(u)),o.push(l),u=C(l),u.r=g(Math.round(u.r*i.shade1),0,255),u.g=g(Math.round(u.g*i.shade1),0,255),u.b=g(Math.round(u.b*i.shade1),0,255),o.push(M(u)),u=C(l),u.r=g(Math.round(u.r*i.shade2),0,255),u.g=g(Math.round(u.g*i.shade2),0,255),u.b=g(Math.round(u.b*i.shade2),0,255),o.push(M(u));else if(2===i.algorithm)for(o.push(l),n=1;n<=i.distance;n++)b=v(b-i.step,0,1),d=v(d-i.step,0,1),o.push({h:c,s:d,v:b});else if(3===i.algorithm)for(o.push(l),n=1;n<=i.distance;n++)b=v(b-i.step,0,1),o.push({h:c,s:d,v:b});else b=v(l.v+2*i.step,0,1),o.push({h:c,s:d,v:b}),b=v(l.v+i.step,0,1),o.push({h:c,s:d,v:b}),o.push(l),d=l.s,b=l.v,b=v(l.v-i.step,0,1),o.push({h:c,s:d,v:b}),b=v(l.v-2*i.step,0,1),o.push({h:c,s:d,v:b});break;case"complementary":case"complement":case"comp":o.push(l),c=p(l.h,180),o.push(new e(c,d,b));break;case"double-complementary":case"double-complement":case"double":o.push(l),c=p(c,180),o.push(new e(c,d,b)),c=p(c,i.angle),o.push(new e(c,d,b)),c=p(c,180),o.push(new e(c,d,b));break;case"analogous":case"analog":c=p(c,i.angle),o.push(new e(c,d,b)),o.push(l),c=p(l.h,0-i.angle),o.push(new e(c,d,b));break;case"triadic":case"triad":for(o.push(l),n=1;n<3;n++)c=p(c,120),o.push(new e(c,d,b));break;case"tetradic":case"tetra":o.push(l),c=p(l.h,180),o.push(new e(c,d,b)),c=p(l.h,-1*i.angle),o.push(new e(c,d,b)),c=p(c,180),o.push(new e(c,d,b));break;case"square":for(o.push(l),n=1;n<4;n++)c=p(c,90),o.push(new e(c,d,b));break;case"split-complementary":case"split-complement":case"split":c=p(c,180-i.angle),o.push(new e(c,d,b)),o.push(l),c=p(l.h,180+i.angle),o.push(new e(c,d,b));break;default:console.warn("Unknown scheme name")}return function(e,t){let a;switch(t){case"hex":a=e.map((function(e){return W(e)}));break;case"rgb":a=e.map((function(e){return F(e)}));break;case"rgba":a=e.map((function(e){return K(e,i.alpha)}));break;case"hsl":a=e.map((function(e){return D(e)}));break;case"hsla":a=e.map((function(e){return E(e,i.alpha)}));break;case"cmyk":a=e.map((function(e){return P(e)}));break;default:a=e}return a}(o,r)},z=function(n){const h=n.toLowerCase();let l=h.replace(/[^\d.,]/g,"").split(",").map((e=>h.includes("hs")?parseFloat(e):parseInt(e)));return"#"===h[0]?o(h):h.includes("rgba")?new s(l[0],l[1],l[2],l[3]):h.includes("rgb")?new r(l[0],l[1],l[2]):h.includes("cmyk")?new i(l[0],l[1],l[2],l[3]):h.includes("hsv")?new e(l[0],l[1],l[2]):h.includes("hsla")?new a(l[0],l[1],l[2],l[3]):h.includes("hsl")?new t(l[0],l[1],l[2]):h},J=(e="hex",t=1)=>{const a=(e,t)=>Math.floor(e+Math.random()*(t+1-e));let r,s,i,n;return s=a(0,255),i=a(0,255),n=a(0,255),r="#"+((1<<24)+(s<<16)+(i<<8)+n).toString(16).slice(1),"hex"===e?r:q(r,e,t)};var Q=Object.freeze({__proto__:null,colorTypes:n,colorDefaultProps:h,createColor:(e="hex",t="#000000")=>{let a;return"string"==typeof t&&(a=z(t)),m(a)||(a="#000000"),q(a,e.toLowerCase())},expandHexColor:o,isDark:l,isLight:u,isHSV:f,isHSL:c,isHSLA:d,isRGB:b,isRGBA:v,isCMYK:g,isHEX:p,isColor:m,colorType:k,equal:_,colorToString:w,hex2rgb:y,rgb2hex:S,rgb2hsv:M,hsv2rgb:C,hsv2hex:e=>S(C(e)),hex2hsv:e=>M(y(e)),rgb2cmyk:B,cmyk2rgb:G,hsv2hsl:$,hsl2hsv:R,rgb2websafe:H,rgba2websafe:L,hex2websafe:x,hsv2websafe:A,hsl2websafe:O,cmyk2websafe:T,websafe:V,toColor:q,toHEX:W,toRGB:F,toRGBA:K,toHSV:N,toHSL:D,toHSLA:E,toCMYK:P,grayscale:Y,darken:j,lighten:I,hueShift:U,createColorScheme:X,parseColor:z,randomColor:J});const Z={aliceBlue:"#f0f8ff",antiqueWhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedAlmond:"#ffebcd",blue:"#0000ff",blueViolet:"#8a2be2",brown:"#a52a2a",burlyWood:"#deb887",cadetBlue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerBlue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkBlue:"#00008b",darkCyan:"#008b8b",darkGoldenRod:"#b8860b",darkGray:"#a9a9a9",darkGreen:"#006400",darkKhaki:"#bdb76b",darkMagenta:"#8b008b",darkOliveGreen:"#556b2f",darkOrange:"#ff8c00",darkOrchid:"#9932cc",darkRed:"#8b0000",darkSalmon:"#e9967a",darkSeaGreen:"#8fbc8f",darkSlateBlue:"#483d8b",darkSlateGray:"#2f4f4f",darkTurquoise:"#00ced1",darkViolet:"#9400d3",deepPink:"#ff1493",deepSkyBlue:"#00bfff",dimGray:"#696969",dodgerBlue:"#1e90ff",fireBrick:"#b22222",floralWhite:"#fffaf0",forestGreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#DCDCDC",ghostWhite:"#F8F8FF",gold:"#ffd700",goldenRod:"#daa520",gray:"#808080",green:"#008000",greenYellow:"#adff2f",honeyDew:"#f0fff0",hotPink:"#ff69b4",indianRed:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderBlush:"#fff0f5",lawnGreen:"#7cfc00",lemonChiffon:"#fffacd",lightBlue:"#add8e6",lightCoral:"#f08080",lightCyan:"#e0ffff",lightGoldenRodYellow:"#fafad2",lightGray:"#d3d3d3",lightGreen:"#90ee90",lightPink:"#ffb6c1",lightSalmon:"#ffa07a",lightSeaGreen:"#20b2aa",lightSkyBlue:"#87cefa",lightSlateGray:"#778899",lightSteelBlue:"#b0c4de",lightYellow:"#ffffe0",lime:"#00ff00",limeGreen:"#32dc32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumAquaMarine:"#66cdaa",mediumBlue:"#0000cd",mediumOrchid:"#ba55d3",mediumPurple:"#9370db",mediumSeaGreen:"#3cb371",mediumSlateBlue:"#7b68ee",mediumSpringGreen:"#00fa9a",mediumTurquoise:"#48d1cc",mediumVioletRed:"#c71585",midnightBlue:"#191970",mintCream:"#f5fffa",mistyRose:"#ffe4e1",moccasin:"#ffe4b5",navajoWhite:"#ffdead",navy:"#000080",oldLace:"#fdd5e6",olive:"#808000",oliveDrab:"#6b8e23",orange:"#ffa500",orangeRed:"#ff4500",orchid:"#da70d6",paleGoldenRod:"#eee8aa",paleGreen:"#98fb98",paleTurquoise:"#afeeee",paleVioletRed:"#db7093",papayaWhip:"#ffefd5",peachPuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderBlue:"#b0e0e6",purple:"#800080",rebeccaPurple:"#663399",red:"#ff0000",rosyBrown:"#bc8f8f",royalBlue:"#4169e1",saddleBrown:"#8b4513",salmon:"#fa8072",sandyBrown:"#f4a460",seaGreen:"#2e8b57",seaShell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",slyBlue:"#87ceeb",slateBlue:"#6a5acd",slateGray:"#708090",snow:"#fffafa",springGreen:"#00ff7f",steelBlue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whiteSmoke:"#f5f5f5",yellow:"#ffff00",yellowGreen:"#9acd32"},ee={color:function(e,t=Z,a=undefined){return void 0!==t[e]?t[e]:a},palette:function(e=Z){return Object.keys(e)},colors:function(e=Z){return Object.values(e)}};class te{_setValue(e){e||(e="#000000"),"string"==typeof e&&(e=z(e)),e&&m(e)?this._value=e:this._value=void 0}_setOptions(e){this._options=Object.assign({},h,e)}constructor(e="#000000",t=null){this._setValue(e),this._setOptions(t)}get options(){return this._options}set options(e){this._setOptions(e)}get value(){return this._value?this._value:void 0}set value(e){this._setValue(e)}toRGB(){if(this._value)return this._value=F(this._value),this}get rgb(){return this._value?F(this._value):void 0}toRGBA(e){if(this._value)return v(this._value)?e&&(this._value=K(this._value,e)):this._value=K(this._value,e||h.alpha),this}get rgba(){return this._value?v(this._value)?this._value:K(this._value,this._options.alpha):void 0}toHEX(){if(this._value)return this._value=W(this._value),this}get hex(){return this._value?W(this._value):void 0}toHSV(){if(this._value)return this._value=N(this._value),this}get hsv(){return this._value?N(this._value):void 0}toHSL(){if(this._value)return this._value=D(this._value),this}get hsl(){return this._value?D(this._value):void 0}toHSLA(e){if(this._value)return d(this._value)?e&&(this._value=E(this._value,e)):this._value=E(this._value,e),this}get hsla(){return this._value?d(this._value)?this._value:E(this._value,this._options.alpha):void 0}toCMYK(){if(this._value)return this._value=P(this._value),this}get cmyk(){return this._value?P(this._value):void 0}toWebsafe(){if(this._value)return this._value=V(this._value),this}get websafe(){return this._value?V(this._value):void 0}toString(){return this._value?w(this._value):void 0}darken(e=10){if(this._value)return this._value=j(this._value,e),this}lighten(e=10){if(this._value)return this._value=I(this._value,e),this}isDark(){return this._value?l(this._value):void 0}isLight(){return this._value?u(this._value):void 0}hueShift(e){if(this._value)return this._value=U(this._value,e),this}grayscale(){if(this._value&&this.type!==n.UNKNOWN)return this._value=Y(this._value,(""+this.type).toLowerCase()),this}get type(){return k(this._value)}getScheme(e,t,a){return this._value?X(this._value,e,t,a):void 0}equal(e){return _(this._value,e)}random(e,t){this._value=J(e,t)}static isColor(e){const t=z(e);return m(t)}static randomColor(e,t){return J(e,t)}}globalThis.Color=te,globalThis.color=e=>new te(e),globalThis.Color.Routines=Q,globalThis.Color.Palette=ee,globalThis.Color.StandardColors=Z,globalThis.Color.MetroColors={lime:"#a4c400",green:"#60a917",emerald:"#008a00",blue:"#00AFF0",teal:"#00aba9",cyan:"#1ba1e2",cobalt:"#0050ef",indigo:"#6a00ff",violet:"#aa00ff",pink:"#dc4fad",magenta:"#d80073",crimson:"#a20025",red:"#CE352C",orange:"#fa6800",amber:"#f0a30a",yellow:"#fff000",brown:"#825a2c",olive:"#6d8764",steel:"#647687",mauve:"#76608a",taupe:"#87794e"}}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
