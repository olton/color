!function(){"use strict";!function(){class t{constructor(t=0,e=0,s=0){this.h=t,this.s=e,this.v=s}toString(){return`hsv(${this.h},${this.s},${this.v})`}}class e{constructor(t=0,e=0,s=0){this.h=t,this.s=e,this.l=s}toString(){return`hsl(${this.h},${this.s},${this.l})`}}class s{constructor(t=0,e=0,s=0,r=0){this.h=t,this.s=e,this.l=s,this.a=r}toString(){return`hsla(${this.h},${this.s},${this.l},${this.a})`}}class r{constructor(t=0,e=0,s=0){this.r=t,this.g=e,this.b=s}toString(){return`rgb(${this.r},${this.g},${this.b})`}}class a{constructor(t=0,e=0,s=0,r=0){this.r=t,this.g=e,this.b=s,this.a=r}toString(){return`rgba(${this.r},${this.g},${this.b},${this.a})`}}class n{constructor(t=0,e=0,s=0,r=0){this.c=t,this.m=e,this.y=s,this.k=r}toString(){return`cmyk(${this.c},${this.m},${this.y},${this.k})`}}const h="hex",i="rgb",u="rgba",o="hsv",l="hsl",c="hsla",v="cmyk",p="unknown",g={angle:30,algorithm:1,step:.1,distance:5,tint1:.8,tint2:.4,shade1:.6,shade2:.3,alpha:1},_=function(t){if(y(t)&&"string"!=typeof t)return t;if("string"!=typeof t)throw new Error("Value is not a string!");if("#"===t[0]&&4===t.length){const e=/^#?([a-f\d])([a-f\d])([a-f\d])$/i;return"#"+t.replace(e,((t,e,s,r)=>e+e+s+s+r+r))}return"#"===t[0]?t:"#"+t},f=t=>{if(!y(t))return;const e=q(t);return(299*e.r+587*e.g+114*e.b)/1e3<128},d=e=>e instanceof t,b=t=>t instanceof e,k=t=>t instanceof s,w=t=>t instanceof r,m=t=>t instanceof a,M=t=>t instanceof n,$=t=>/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(t),y=t=>!!t&&($(t)||w(t)||m(t)||d(t)||b(t)||k(t)||M(t)),S=t=>$(t)?h:w(t)?i:m(t)?u:d(t)?o:b(t)?l:k(t)?c:M(t)?v:p,L=t=>{const e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(_(t)),s=[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)];return e?new r(...s):null},C=t=>"#"+((1<<24)+(t.r<<16)+(t.g<<8)+t.b).toString(16).slice(1),x=e=>{const s=new t;let r,a,n;const h=e.r/255,i=e.g/255,u=e.b/255,o=Math.max(h,i,u),l=Math.min(h,i,u),c=o-l;return n=o,a=0===o?0:1-l/o,r=o===l?0:o===h&&i>=u?(i-u)/c*60:o===h&&i<u?(i-u)/c*60+360:o===i?(u-h)/c*60+120:o===u?(h-i)/c*60+240:0,s.h=r,s.s=a,s.v=n,s},I=t=>{let e,s,a;const n=t.h,h=100*t.s,i=100*t.v,u=(100-h)*i/100,o=n%60/60*(i-u),l=u+o,c=i-o;switch(Math.floor(n/60)){case 0:e=i,s=l,a=u;break;case 1:e=c,s=i,a=u;break;case 2:e=u,s=i,a=l;break;case 3:e=u,s=c,a=i;break;case 4:e=l,s=u,a=i;break;case 5:e=i,s=u,a=c}return new r(Math.round(255*e/100),Math.round(255*s/100),Math.round(255*a/100))},O=t=>{const e=new n,s=t.r/255,r=t.g/255,a=t.b/255;return e.k=Math.min(1-s,1-r,1-a),e.c=1-e.k==0?0:(1-s-e.k)/(1-e.k),e.m=1-e.k==0?0:(1-r-e.k)/(1-e.k),e.y=1-e.k==0?0:(1-a-e.k)/(1-e.k),e.c=Math.round(100*e.c),e.m=Math.round(100*e.m),e.y=Math.round(100*e.y),e.k=Math.round(100*e.k),e},V=t=>{const e=Math.floor(255*(1-t.c/100)*(1-t.k/100)),s=Math.ceil(255*(1-t.m/100)*(1-t.k/100)),a=Math.ceil(255*(1-t.y/100)*(1-t.k/100));return new r(e,s,a)},A=t=>{let s,r,a,n;return s=t.h,a=(2-t.s)*t.v,r=t.s*t.v,0===a?r=0:(n=a<=1?a:2-a,0===n?r=0:r/=n),a/=2,new e(s,r,a)},H=e=>{let s,r,a,n;return s=e.h,n=2*e.l,r=e.s*(n<=1?n:2-n),a=(n+r)/2,r=n+r===0?0:2*r/(n+r),new t(s,r,a)},E=t=>new r(51*Math.round(t.r/51),51*Math.round(t.g/51),51*Math.round(t.b/51)),F=t=>$(t)?C(E(L(t))):w(t)?E(t):m(t)?(t=>{const e=E(t);return new a(e.r,e.g,e.b,t.a)})(t):d(t)?x(E(q(t))):b(t)?A(x(E(q(t)))):M(t)?O(E(V(t))):t,T=(t,e="rgb",s=1)=>{let r;switch(e.toLowerCase()){case"hex":r=j(t);break;case"rgb":r=q(t);break;case"rgba":r=B(t,s);break;case"hsl":r=R(t);break;case"hsla":r=U(t,s);break;case"hsv":r=G(t);break;case"cmyk":r=D(t);break;default:r=t}return r},j=t=>"string"==typeof t?_(t):C(q(t)),q=t=>{if(w(t))return t;if(m(t))return new r(t.r,t.g,t.b);if(d(t))return I(t);if(b(t))return I(H(t));if(k(t))return I(H(t));if($(t))return L(t);if(M(t))return V(t);throw new Error("Unknown color format!")},B=(t,e)=>{if(m(t))return e&&(t.a=e),t;const s=q(t);return new a(s.r,s.g,s.b,e)},G=t=>x(q(t)),R=t=>A(x(q(t))),U=(t,e=1)=>{if(k(t))return e&&(t.a=e),t;let r=A(x(q(t)));return r.a=e,new s(r.h,r.s,r.l,r.a)},D=t=>O(q(t)),K=(t,e=10)=>{let s,r,a=e>0;const n=function(t,e){let s,r,a;const n=t.slice(1),h=parseInt(n,16);return s=(h>>16)+e,s>255?s=255:s<0&&(s=0),a=(h>>8&255)+e,a>255?a=255:a<0&&(a=0),r=(255&h)+e,r>255?r=255:r<0&&(r=0),"#"+(r|a<<8|s<<16).toString(16)};s=S(t).toLowerCase(),s===u&&t.a;do{r=n(j(t),e),a?e--:e++}while(r.length<7);return T(r,s)};class W{_setValue(h){h||(h="#000000"),"string"==typeof h&&(h=_(function(h){const i=h.toLowerCase();let u=i.replace(/[^\d.,]/g,"").split(",").map((t=>i.includes("hs")?parseFloat(t):parseInt(t)));return"#"===i[0]?_(i):i.includes("rgba")?new a(u[0],u[1],u[2],u[3]):i.includes("rgb")?new r(u[0],u[1],u[2]):i.includes("cmyk")?new n(u[0],u[1],u[2],u[3]):i.includes("hsv")?new t(u[0],u[1],u[2]):i.includes("hsla")?new s(u[0],u[1],u[2],u[3]):i.includes("hsl")?new e(u[0],u[1],u[2]):i}(h))),h&&y(h)&&(this._value=h)}_setOptions(t){this._options=Object.assign({},g,t)}constructor(t="#000000",e=null){this._setValue(t),this._setOptions(e)}get options(){return this._options}set options(t){this._setOptions(t)}get value(){return this._value?this._value:void 0}set value(t){this._setValue(t)}toRGB(){if(this._value)return this._value=q(this._value),this}get rgb(){return this._value?q(this._value):void 0}toRGBA(t){if(this._value)return m(this._value)?t&&(this._value=B(this._value,t)):this._value=B(this._value,t||g.alpha),this}get rgba(){return this._value?m(this._value)?this._value:B(this._value,this._options.alpha):void 0}toHEX(){if(this._value)return this._value=j(this._value),this}get hex(){return this._value?j(this._value):void 0}toHSV(){if(this._value)return this._value=G(this._value),this}get hsv(){return this._value?G(this._value):void 0}toHSL(){if(this._value)return this._value=R(this._value),this}get hsl(){return this._value?R(this._value):void 0}toHSLA(t){if(this._value)return k(this._value)?t&&(this._value=U(this._value,t)):this._value=U(this._value,t),this}get hsla(){return this._value?k(this._value)?this._value:U(this._value,this._options.alpha):void 0}toCMYK(){if(this._value)return this._value=D(this._value),this}get cmyk(){return this._value?D(this._value):void 0}toWebsafe(){if(this._value)return this._value=F(this._value),this}get websafe(){return this._value?F(this._value):void 0}toString(){return this._value?this._value.toString():void 0}darken(t=10){if(this._value)return this._value=((t,e=10)=>K(t,-1*Math.abs(e)))(this._value,t),this}lighten(t=10){if(this._value)return this._value=K(this._value,t),this}isDark(){return this._value?f(this._value):void 0}isLight(){return this._value?(t=this._value,!f(t)):void 0;var t}hueShift(t){if(this._value)return this._value=((t,e,s=1)=>{const r=G(t),a=S(t).toLowerCase();let n=r.h;for(n+=e;n>=360;)n-=360;for(;n<0;)n+=360;return r.h=n,T(r,a,s)})(this._value,t),this}grayscale(){if(this._value&&this.type!==p)return this._value=(t=>{const e=q(t),s=S(t).toLowerCase(),a=Math.round(.2125*e.r+.7154*e.g+.0721*e.b),n=new r(a,a,a);return T(n,s)})(this._value,(""+this.type).toLowerCase()),this}get type(){return S(this._value)}getScheme(e,s,r){return this._value?((e,s,r,a)=>{const n=Object.assign({},g,a);let h;const i=[];let u,o,l,c,v;if(u=G(e),l=u.h,c=u.s,v=u.v,!1===d(u))return console.warn("The value is a not supported color format!"),!1;function p(t,e,s){return Math.max(e,Math.min(t,s))}function _(t,e,s){return t<e?e:t>s?s:t}function f(t,e){for(t+=e;t>=360;)t-=360;for(;t<0;)t+=360;return t}switch(s){case"monochromatic":case"mono":if(1===n.algorithm)o=I(u),o.r=_(Math.round(o.r+(255-o.r)*n.tint1),0,255),o.g=_(Math.round(o.g+(255-o.g)*n.tint1),0,255),o.b=_(Math.round(o.b+(255-o.b)*n.tint1),0,255),i.push(x(o)),o=I(u),o.r=_(Math.round(o.r+(255-o.r)*n.tint2),0,255),o.g=_(Math.round(o.g+(255-o.g)*n.tint2),0,255),o.b=_(Math.round(o.b+(255-o.b)*n.tint2),0,255),i.push(x(o)),i.push(u),o=I(u),o.r=_(Math.round(o.r*n.shade1),0,255),o.g=_(Math.round(o.g*n.shade1),0,255),o.b=_(Math.round(o.b*n.shade1),0,255),i.push(x(o)),o=I(u),o.r=_(Math.round(o.r*n.shade2),0,255),o.g=_(Math.round(o.g*n.shade2),0,255),o.b=_(Math.round(o.b*n.shade2),0,255),i.push(x(o));else if(2===n.algorithm)for(i.push(u),h=1;h<=n.distance;h++)v=p(v-n.step,0,1),c=p(c-n.step,0,1),i.push({h:l,s:c,v:v});else if(3===n.algorithm)for(i.push(u),h=1;h<=n.distance;h++)v=p(v-n.step,0,1),i.push({h:l,s:c,v:v});else v=p(u.v+2*n.step,0,1),i.push({h:l,s:c,v:v}),v=p(u.v+n.step,0,1),i.push({h:l,s:c,v:v}),i.push(u),c=u.s,v=u.v,v=p(u.v-n.step,0,1),i.push({h:l,s:c,v:v}),v=p(u.v-2*n.step,0,1),i.push({h:l,s:c,v:v});break;case"complementary":case"complement":case"comp":i.push(u),l=f(u.h,180),i.push(new t(l,c,v));break;case"double-complementary":case"double-complement":case"double":i.push(u),l=f(l,180),i.push(new t(l,c,v)),l=f(l,n.angle),i.push(new t(l,c,v)),l=f(l,180),i.push(new t(l,c,v));break;case"analogous":case"analog":l=f(l,n.angle),i.push(new t(l,c,v)),i.push(u),l=f(u.h,0-n.angle),i.push(new t(l,c,v));break;case"triadic":case"triad":for(i.push(u),h=1;h<3;h++)l=f(l,120),i.push(new t(l,c,v));break;case"tetradic":case"tetra":i.push(u),l=f(u.h,180),i.push(new t(l,c,v)),l=f(u.h,-1*n.angle),i.push(new t(l,c,v)),l=f(l,180),i.push(new t(l,c,v));break;case"square":for(i.push(u),h=1;h<4;h++)l=f(l,90),i.push(new t(l,c,v));break;case"split-complementary":case"split-complement":case"split":l=f(l,180-n.angle),i.push(new t(l,c,v)),i.push(u),l=f(u.h,180+n.angle),i.push(new t(l,c,v));break;default:console.warn("Unknown scheme name")}return function(t,e){let s;switch(e){case"hex":s=t.map((function(t){return j(t)}));break;case"rgb":s=t.map((function(t){return q(t)}));break;case"rgba":s=t.map((function(t){return B(t,n.alpha)}));break;case"hsl":s=t.map((function(t){return R(t)}));break;case"hsla":s=t.map((function(t){return U(t,n.alpha)}));break;case"cmyk":s=t.map((function(t){return D(t)}));break;default:s=t}return s}(i,r)})(this._value,e,s,r):void 0}equal(t){return e=this._value,s=t,!(!y(e)||!y(s))&&j(e)===j(s);var e,s}}globalThis.Color=W,globalThis.color=t=>new W(t)}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
